name: Nightly Repository Update

on:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC daily
  workflow_dispatch:  # Allow manual triggers

# Add these permissions
permissions:
  contents: write
  pull-requests: write

jobs:
  update-repository:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests packaging
    
    - name: Configure Git
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
    
    - name: Update Repository
      env:
        REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      run: |
        python scripts/update_repository.py
    
    - name: Commit and Push Changes
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Get the list of modified apps
          MODIFIED_FILES=$(git diff --staged --name-only)
          
          # Build commit message
          COMMIT_MSG="ðŸ¤– Repository Update\n\n"
          
          # Check for app updates
          APP_UPDATES=$(echo "$MODIFIED_FILES" | grep "Apps/.*app.json" || true)
          if [ ! -z "$APP_UPDATES" ]; then
            COMMIT_MSG+="Updated apps:\n"
            while IFS= read -r file; do
              APP_NAME=$(echo "$file" | sed 's/Apps\/\(.*\)\/app.json/\1/')
              NEW_VERSION=$(git diff --staged "$file" | grep '+"version":' | head -n 1 | sed 's/.*"version": "\(.*\)",/\1/')
              if [ ! -z "$NEW_VERSION" ]; then
                COMMIT_MSG+="- $APP_NAME ($NEW_VERSION)\n"
              else
                COMMIT_MSG+="- $APP_NAME\n"
              fi
            done <<< "$APP_UPDATES"
          fi
          
          # Check for repository format updates
          REPO_UPDATES=$(echo "$MODIFIED_FILES" | grep -E "repo\.json|scarlet\.json|trollapps\.json|altstore\.json" || true)
          if [ ! -z "$REPO_UPDATES" ]; then
            COMMIT_MSG+="\nUpdated repository formats:\n"
            while IFS= read -r file; do
              FORMAT=$(basename "$file" .json)
              COMMIT_MSG+="- $FORMAT\n"
            done <<< "$REPO_UPDATES"
          fi
          
          git commit -m "$(echo -e "$COMMIT_MSG")"
          git push
        fi
